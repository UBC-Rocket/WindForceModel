function Forces = BendingForce(Rocket,Global,Forces)
%BendingForce - Calculates bending forces
%
% Syntax:  Forces = BendingForce(Rocket,Gloabl,Forces)
%
% Inputs:
%    Rocket - Rocket parameters
%    Global - Global parameters
%    Forces - Forces structure to store force values
%    
% Outputs:
%    Forces - Forces structure to store force values
%        Forces.Shear - Shear Force at each center of mass
%        Forces.Bending - Bending Moment at each joint
%
% Other m-files required: none
% Subfunctions: none
% MAT-files required: ESDU89008.mat
%   ESDU89008 Tables at 0 AoA taken from Rocketry Aerodynamics - AspireSpace    
%
% Author: Conan Omori
% email address: conanomo@alumni.ubc.ca
% November 2020; Last revision: 23-Nov-2020
%
%------------- BEGIN CODE --------------
%% Lift Gradient Curves
%Load ESDU 89008 Lift Coefficient Values
load('ESDU89008.mat');

%Determine Nosecone calibre
NoseconeLength=Rocket.ComponentLengths(find(matches(Rocket.Components,'Nose Cone and Payload - Nose Cone')),:);
NoseconeCalibre=NoseconeLength/Rocket.Diameter;

%Interp lift curve for the correct nosecone calibre and mach number
NoseconeLiftGradient=interp2(ESDU89008.NoseconeLiftCalibre,ESDU89008.NoseconeLiftMachNumber,ESDU89008.NoseconeLiftGradient,NoseconeCalibre,Global.MachNumber,'spline');
FinLiftGradient=interp1(ESDU89008.FinLiftMachNumber,ESDU89008.FinLiftGradient,Global.MachNumber,'linear',2.5);
FinLiftCorrection=1+(Rocket.Diameter/2)/((Rocket.Diameter/2)+Rocket.FinSpan); %Barrowman Fin Lift correction K_T(B)
FinLiftGradient=FinLiftGradient*FinLiftCorrection; %Corrected lift coefficient gradients
FinLiftGradient=FinLiftGradient*Rocket.FinArea*2/(pi*Rocket.Diameter^2/4);

%% Center of Pressure
%Calculate CP of nosecone and fins
CP.Nosecone=(interp2(ESDU89008.NoseconeCPCalibre,ESDU89008.NoseconeCPMachNumber,ESDU89008.NoseconeCPCalibrePosition,NoseconeCalibre,Global.MachNumber,'spline')*NoseconeLength)'; %CP as measured from tip of nosecone (m)
CP.Fins=(interp1(ESDU89008.FinCPMachNumber,ESDU89008.FinCPPosition,Global.MachNumber,'linear',0.47)*Rocket.FinRootChord+Rocket.FinPosition)';

%% Lift Forces
%Calculate lift curve slope of nosecose and fins at 0 deg AoA
Lift.Nosecone=((Global.WindGustAssumption/2)*Global.Density.*Global.Velocity.*(pi*Rocket.Diameter^2/4).*NoseconeLiftGradient)'; %Lift generated by nosecone for an assumed gust (N)
Lift.Fins=((Global.WindGustAssumption/2)*Global.Density.*Global.Velocity.*(pi*Rocket.Diameter^2/4).*FinLiftGradient)';

%% Accelerations
Acc.Lateral=(Lift.Nosecone+Lift.Fins)./sum(Rocket.ComponentMassesTime); %Lateral force for each component from a gust
Acc.Angular=(Global.WindGustAssumption./(2*Rocket.Ixx)).*Global.Density'.*Global.Velocity'.*(pi*Rocket.Diameter^2/4).*(-NoseconeLiftGradient'.*abs(CP.Nosecone-Rocket.CG)+FinLiftGradient'.*abs(CP.Fins-Rocket.CG));

%% Shear Forces
Shear=-Acc.Lateral.*Rocket.ComponentMassesTime-Acc.Angular.*Rocket.ComponentMassesTime.*(Rocket.ComponentCG-Rocket.CG);
Shear=[Shear;Lift.Nosecone;Lift.Fins];
ShearPositions=[Rocket.ComponentCG;CP.Nosecone;CP.Fins];

if sum(isnan(Rocket.ComponentCG)) > 0
    error("CG not defined somewhere")
end
if sum(isnan(CP.Nosecone)) > 0
    error("CP Nose not defined somewhere")
end
if sum(isnan(CP.Fins)) > 0
    error("CP Fins defined somewhere")
end
[SortedShearPositions,SortedIndex]=sort(ShearPositions,1);
for i=1:length(Global.Time)
    Shear(:,i)=Shear(SortedIndex(:,i),i);
end
Shear=cumsum(Shear);
Forces.Shear=zeros(length(Rocket.Components),length(Global.Time));
for i=1:length(Global.Time)
    Forces.Shear(:,i)=interp1(SortedShearPositions(:,i),Shear(:,i),Rocket.ComponentPositions,'previous');
end
Forces.Shear(end,:)=[];

%% Bending Moments
Bending=cumtrapz(Shear);
Forces.Bending=zeros(length(Rocket.Components),length(Global.Time));
for i=1:length(Global.Time)
    Forces.Bending(:,i)=interp1(SortedShearPositions(:,i),Bending(:,i),Rocket.ComponentPositions);
end
Forces.Bending(end,:)=[];
%------------- END OF CODE --------------
